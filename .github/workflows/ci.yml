name: Continuous Integration

on:
  push:
    tags:
    - 'rc-*'
    branches:
    - main
    - staging
    - production

    - feature_*

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v3
      with:
        python-version: 3.11
        
    - name: Resolve dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pipenv
        pipenv lock
        pipenv install --dev
        
    - name: Syntax check
      run: |
        pipenv run pyflakes

  test:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v3
      with:
        python-version: 3.11
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pipenv
        pipenv install --dev
        
    - name: Run tests
      run: |
        pipenv run tests
    
    - name: Coverage report
      run: |
        pipenv run coverage
        pipenv run coverage-report

  tag-build:
    runs-on: ubuntu-latest
    if: github.ref_name == 'main'
    needs: test

    steps:
      - uses: actions/checkout@v4

      - name: Get current datetime
        run: echo "date=$(date +'%Y%m%d%H%M%S%N')" >> $GITHUB_ENV

      - name: Generate build tag name
        run: echo "TAG_NAME=build-${{ env.date }}" >> $GITHUB_ENV

      - name: Create build tag
        run: |
          git tag $TAG_NAME
          git push origin $TAG_NAME

  lint:
    runs-on: ubuntu-latest
    if: github.ref_name != 'main'
    needs: test

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v3
      with:
        python-version: 3.11
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pipenv
        pipenv install --dev
        
    - name: Static code analyser
      run: |
        pipenv run lint
        
  package-release-candidate:
    runs-on: ubuntu-latest
    if: github.ref_type == 'tag' && startsWith(github.ref_name, 'rc-')
    needs: lint

    steps:
      - uses: actions/checkout@v4
      
      - name: Package source code
        run: |
          zip -r ${{ github.ref_name }}.zip .

      - name: Archieve source code package
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.ref_name }}
          path: ${{ github.ref_name }}.zip

  tag-release:
    runs-on: ubuntu-latest
    # if: github.ref_type == 'branch' && github.ref_name == 'production'
    needs: lint

    outputs:
      rc_tag_name: ${{ steps.retrieve_latest_release_candidate_tag.outputs.rc_tag_name }}
      release_tag_name: ${{ steps.generate_release_tag_name.outputs.release_tag_name }}

    steps:
      - uses: actions/checkout@v4

      - name: Retrieve latest release candidate tag
        id: retrieve_latest_release_candidate_tag
        run: |
          git fetch --tags
          echo "rc_tag_name=$(git describe --match "rc-*" --abbrev=0 --tags $(git rev-list --tags --max-count=1))" >> $GITHUB_OUTPUT

      - name: Generate release tag name
        id: generate_release_tag_name
        env:
          rc_tag_name: ${{ steps.retrieve_latest_release_candidate_tag.outputs.rc_tag_name }}
        run: |
          echo "release_tag_name=${rc_tag_name//rc/rel}" >> $GITHUB_OUTPUT

      - name: Create release tag
        id: create_release_tag
        run: |
          git tag ${{ steps.generate_release_tag_name.outputs.release_tag_name }}
          git push origin ${{ steps.generate_release_tag_name.outputs.release_tag_name }}

  package-release:
    runs-on: ubuntu-latest
    # if: github.ref_type == 'branch' && github.ref_name == 'production'
    needs: tag-release

    env:
      release_tag_name: ${{ needs.tag-release.outputs.release_tag_name }}
    
    steps:
      - uses: actions/checkout@v4

      - name: Package source code
        run: |
          zip -r $release_tag_name.zip .

      - name: Archieve source code package
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.release_tag_name }}
          path: ${{ env.release_tag_name }}.zip

  docker-build:
    runs-on: ubuntu-latest
    # if: github.ref_type == 'branch' && github.ref_name == 'production'
    needs: tag-release

    outputs:
      docker_image_name: ${{ steps.generate_docker_image_name.outputs.docker_image_name }}
      docker_image_file_name: ${{ steps.generate_docker_image_name.outputs.docker_image_file_name }}

    env:
      release_tag_name: ${{ needs.tag-release.outputs.release_tag_name }}

    steps:
    - uses: actions/checkout@v4
    
    - name: Generate docker image name
      id: generate_docker_image_name
      run: |
        echo "docker_image_name=${{ github.repository }}:$release_tag_name" >> $GITHUB_OUTPUT
        echo "docker_image_file_name=docker-build-image" >> $GITHUB_OUTPUT

    - name: Build docker image
      id: build_docker_image
      run: |
        docker build -t ${{ steps.generate_docker_image_name.outputs.docker_image_name }} .
        docker save ${{ steps.generate_docker_image_name.outputs.docker_image_name }} -o ${{ steps.generate_docker_image_name.outputs.docker_image_file_name }}.tar

    - name: Archieve docker build image
      id: archieve_docker_build_image
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.generate_docker_image_name.outputs.docker_image_file_name }}
        path: ${{ steps.generate_docker_image_name.outputs.docker_image_file_name }}.zip

  docker-publish:
    runs-on: ubuntu-latest
    # if: github.ref_type == 'branch' && github.ref_name == 'production'
    needs: docker-build
    
    steps:
      - name: Download docker build image
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.docker-build.outputs.docker_image_file_name }}
          path: .

      - name: Load docker build image
        run: docker load -i ${{ needs.docker-build.outputs.docker_image_file_name }}.tar

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Publish docker build image to Docker Hub
        run: |
          docker tag ${{ needs.docker-build.outputs.docker_image_name }} ${{ needs.docker-build.outputs.docker_image_name }}
          docker push ${{ needs.docker-build.outputs.docker_image_name }}
