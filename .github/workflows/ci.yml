name: Continuous Integration

on:
  push:
    tags:
    - 'rc-*'
    branches:
    - main
    - staging
    - production

    - feature_*

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v3
      with:
        python-version: 3.11
        
    - name: Resolve dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pipenv
        pipenv lock
        pipenv install --dev
        
    - name: Syntax check
      run: |
        pipenv run pyflakes

  test:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v3
      with:
        python-version: 3.11
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pipenv
        pipenv install --dev
        
    - name: Run tests
      run: |
        pipenv run tests
    
    - name: Coverage report
      run: |
        pipenv run coverage
        pipenv run coverage-report

  tag-build:
    runs-on: ubuntu-latest
    # if: github.ref_name == 'main'
    needs: test

    steps:
      - uses: actions/checkout@v4

      - name: Get current datetime
        run: echo "date=$(date +'%Y%m%d%H%M%S%N')" >> $GITHUB_ENV

      - name: Generate build tag name
        run: echo "TAG_NAME=build-${{ env.date }}" >> $GITHUB_ENV

      - name: Create build tag
        run: |
          git tag $TAG_NAME
          git push origin $TAG_NAME

  lint:
    runs-on: ubuntu-latest
    # if: github.ref_name != 'main'
    needs: test

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v3
      with:
        python-version: 3.11
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pipenv
        pipenv install --dev
        
    - name: Static code analyser
      run: |
        pipenv run lint
        
  package-release-candidate:
    runs-on: ubuntu-latest
    # if: github.ref_type == 'tag'
    needs: lint

    steps:
      - uses: actions/checkout@v4
      
      - name: Package source code
        run: |
          zip -r ${{ github.ref_name }}.zip .

      - name: Archieve source code package
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.ref_name }}
          path: ${{ github.ref_name }}.zip

  tag-release:
    runs-on: ubuntu-latest
    # if: github.ref_name == 'production'
    needs: lint

    steps:
      - uses: actions/checkout@v4

      - name: Get current datetime
        run: |
          echo "date=$(date +'%Y%m%d%H%M%S%N')" >> $GITHUB_ENV

      - name: Retrieve latest release candidate tag
        run: |
          git fetch --tags
          echo "RC_TAG_NAME=$(git describe --match "rc-*" --abbrev=0 --tags $(git rev-list --tags --max-count=1))" >> $GITHUB_ENV

      - name: Generate release tag name
        run: |
          echo "RELEASE_TAG_NAME=${RC_TAG_NAME//rc/rel}" >> $GITHUB_ENV

      - name: Create release tag
        run: |
          git tag $RELEASE_TAG_NAME
          git push origin $RELEASE_TAG_NAME

  package-release:
    runs-on: ubuntu-latest
    # if: github.ref_name == 'production'
    needs: tag-release
    
    steps:
      - uses: actions/checkout@v4
      

      - name: Retrieve latest release tag
        run: |
          git fetch --tags
          echo "RELEASE_TAG_NAME=$(git describe --match "rel-*" --abbrev=0 --tags $(git rev-list --tags --max-count=1))" >> $GITHUB_ENV

      - name: Package source code
        run: |
          zip -r ${{ RELEASE_TAG_NAME }}.zip .

      - name: Archieve source code package
        uses: actions/upload-artifact@v4
        with:
          name: ${{ RELEASE_TAG_NAME }}
          path: ${{ RELEASE_TAG_NAME} }.zip

  docker-build:
    runs-on: ubuntu-latest
    # if:
    needs: package-release

    steps:
    - uses: actions/checkout@v4
    
    - name: Retrieve latest release tag
      run: |
        echo "RELEASE_TAG_NAME=$(git describe --match "rel-*" --abbrev=0 --tags $(git rev-list --tags --max-count=1))" >> $GITHUB_ENV

    - name: Build docker image
      run: |
        docker build -t sysbanking:${{ RELEASE_TAG_NAME }} .
